fiber = require 'fiber'
---
...
msgpack = require 'msgpack'
---
...
net = require('net.box')
---
...
--
-- gh-3107: fiber-async netbox.
--
cond = nil
---
...
box.schema.func.create('long_function')
---
...
box.schema.user.grant('guest', 'execute', 'function', 'long_function')
---
...
function long_function(...) cond = fiber.cond() cond:wait() return ... end
---
...
function finalize_long() while not cond do fiber.sleep(0.01) end cond:signal() cond = nil end
---
...
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk')
---
...
s:replace{1}
---
- [1]
...
s:replace{2}
---
- [2]
...
s:replace{3}
---
- [3]
...
s:replace{4}
---
- [4]
...
c = net:connect(box.cfg.listen)
---
...
--
-- Ensure a request can be finalized from non-caller fibers.
--
future = c:call('long_function', {1, 2, 3}, {is_async = true})
---
...
ret = {}
---
...
count = 0
---
...
for i = 1, 10 do fiber.create(function() ret[i] = future:wait_result(1000) count = count + 1 end) end
---
...
future:wait_result(0.01) -- Must fail on timeout.
---
- null
- Timeout exceeded
...
finalize_long()
---
...
while count ~= 10 do fiber.sleep(0.1) end
---
...
ret
---
- - &0 [1, 2, 3]
  - *0
  - *0
  - *0
  - *0
  - *0
  - *0
  - *0
  - *0
  - *0
...
--
-- Test raw response getting.
--
ibuf = require('buffer').ibuf()
---
...
future = c:call('long_function', {1, 2, 3}, {is_async = true, buffer = ibuf})
---
...
finalize_long()
---
...
future:wait_result(100)
---
- 10
...
result, ibuf.rpos = msgpack.decode_unchecked(ibuf.rpos)
---
...
result
---
- {48: [1, 2, 3]}
...
box.schema.func.drop('long_function')
---
...
c:close()
---
...
s:drop()
---
...
